<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Socket.io Client</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <!-- Include Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .canvas-container {
            width: 100%;
            display: flex;
            flex-direction: row;
        }
    </style>
</head>

<body>
    <h1>Admin Panel</h1>
    <input id="player-1-autonomous" value="1" type="checkbox">Player 1 Autonomous </input>
    <input id="player-2-autonomous" value="2" type="checkbox">Player 2 Autonomous </input>
    <button id="kick-player-1">Kick Player 1</button>
    <button id="kick-player-2">Kick Player 2</button>

    <div class="canvas-container">
        <div style="width: 600px;">
            <!-- Add a canvas element for the first graph (s1 and c1) -->
            <canvas id="graph1"></canvas>
        </div>
        <div style="width: 600px;">
            <!-- Add a canvas element for the second graph (s2 and c2) -->
            <canvas id="graph2"></canvas>
        </div>
    </div>

    <script>
        // Dynamically determine the server address based on the current page's origin
        const serverUrl = `${window.location.origin}/admin`;
        const socket = io(serverUrl, {
            query: {
                secret: "<%= secret %>"
            }
        });

        function emitAutonomousToggle(element) {
            socket.emit("toggle_autonomous", { enabled: element.checked, car: Number(element.value) })
            console.log({ enabled: element.checked, car: element.value });
        }

        // Event listener for the Player 1 Autonomous checkbox
        const player1AutonomousCheckbox = document.getElementById('player-1-autonomous');
        player1AutonomousCheckbox.addEventListener('change', function () {
            emitAutonomousToggle(player1AutonomousCheckbox)
        });

        // Event listener for the Player 2 Autonomous checkbox
        const player2AutonomousCheckbox = document.getElementById('player-2-autonomous');
        player2AutonomousCheckbox.addEventListener('change', function () {
            emitAutonomousToggle(player2AutonomousCheckbox)
        });

        // Initialize empty arrays to store data points for each data series
        const c1DataPoints = [];
        const c2DataPoints = [];
        const s1DataPoints = [];
        const s2DataPoints = [];

        // Initialize Chart.js line charts for each graph
        const ctx1 = document.getElementById('graph1').getContext('2d');
        const graph1 = new Chart(ctx1, {
            type: 'line',
            data: {
                labels: [], // X-axis labels
                datasets: [
                    {
                        label: 'c1',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1,
                        data: [], // Y-axis data for c1
                        fill: false
                    },
                    {
                        label: 's1',
                        borderColor: 'rgba(255, 0, 0, 1)',
                        borderWidth: 1,
                        data: [], // Y-axis data for s1
                        fill: false
                    }
                ]
            },
            options: {
                responsive: true,
                animation: false,
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Value'
                        }
                    }
                }
            }
        });


        const ctx2 = document.getElementById('graph2').getContext('2d');
        const graph2 = new Chart(ctx2, {
            type: 'line',
            data: {
                labels: [], // X-axis labels
                datasets: [
                    {
                        label: 'c2',
                        borderColor: 'rgba(0, 128, 0, 1)',
                        borderWidth: 1,
                        data: [], // Y-axis data for c2
                        fill: false
                    },
                    {
                        label: 's2',
                        borderColor: 'rgba(128, 0, 128, 1)',
                        borderWidth: 1,
                        data: [], // Y-axis data for s2
                        fill: false
                    }
                ]
            },
            options: {
                responsive: true,
                animation: false,
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Value'
                        }
                    }
                }
            }
        });

        // Function to update the line graph with new data for graph1 (s1 and c1)
        function updateGraph1(newData) {
            // Add new data points to the respective data series
            c1DataPoints.push(newData.c1);
            s1DataPoints.push(newData.s1);

            // Limit the number of data points displayed to a maximum of 20
            const maxDataPoints = 20;
            if (c1DataPoints.length > maxDataPoints) {
                c1DataPoints.shift();
                s1DataPoints.shift();
            }

            // Update the chart data for graph1
            graph1.data.labels = Array.from({ length: c1DataPoints.length }, (_, i) => i);
            graph1.data.datasets[0].data = c1DataPoints.slice(-maxDataPoints);
            graph1.data.datasets[1].data = s1DataPoints.slice(-maxDataPoints);

            // Update the chart for graph1
            graph1.update();
        }

        // Function to update the line graph with new data for graph2 (s2 and c2)
        function updateGraph2(newData) {
            // Add new data points to the respective data series
            c2DataPoints.push(newData.c2);
            s2DataPoints.push(newData.s2);

            // Limit the number of data points displayed to a maximum of 20
            const maxDataPoints = 20;
            if (c2DataPoints.length > maxDataPoints) {
                c2DataPoints.shift();
                s2DataPoints.shift();
            }

            // Update the chart data for graph2
            graph2.data.labels = Array.from({ length: c2DataPoints.length }, (_, i) => i);
            graph2.data.datasets[0].data = c2DataPoints.slice(-maxDataPoints);
            graph2.data.datasets[1].data = s2DataPoints.slice(-maxDataPoints);

            // Update the chart for graph2
            graph2.update();
        }

        socket.on('connect', () => {
            console.log('Connected to Socket.io server on admin namespace');
        });

        socket.on('diagnostic', (data) => {
            console.log('Received data from server:', data);
            updateGraph1(data); // Update graph1 (s1 and c1)
            updateGraph2(data); // Update graph2 (s2 and c2)
        });

        // Example: Send data to the server when a button is clicked
        document.getElementById('kick-player-1').addEventListener('click', () => {
            socket.emit('kick_player', 1);
        });
        document.getElementById('kick-player-2').addEventListener('click', () => {
            socket.emit('kick_player', 2);
        });
    </script>

</body>

</html>